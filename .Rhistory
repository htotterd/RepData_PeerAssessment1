complete <- function(directory, id=1:332) {
nobs <- NULL
for(i in id) {
k=1
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[k] = length(data$sulfate) - sum(is.na(data$sulfate) | is.na(data$nitrate))
k=k+1
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, 1)
complete(directory, c(2,4,8,10,12))
complete <- function(directory, id=1:332) {
nobs <- NULL
k=1
for(i in id) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[k] = length(data$sulfate) - sum(is.na(data$sulfate) | is.na(data$nitrate))
k=k+1
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, 1)
complete(directory, c(2,4,8,10,12))
complete(directory, 30:25)
complete(directory, 3)
library(datasets)
data(iris)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1, mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtrcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364-15.1
tapply(mtcars$horsepower, mtcars$cyl, mean)
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector(c(1,2,3,4))
x
cachemean(x)
x = c(1,2,3,4)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) { mat <<- inverse}
getinverse <- function() { mat }
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
mat <- x$getinverse()
if(!is.null(mat)) {
return(mat)
}
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) { mat <<- inverse}
getinverse <- function() { mat }
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Computes the inverse of the matrix returned by makeCacheMatrix
cacheSolve <- function(x, ...) {
mat <- x$getinverse()
if(!is.null(mat)) {
return(mat)
}
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
y <- makeCacheMatrix(c(1,2,3,4))
y
prac <- cacheSolve(y)
x <- matrix(c(1,2,3,4), nrow=2)
x
solve(x)
y <- makeCacheMatrix(x)
cacheSolve(y)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
quiz1 <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
quiz1 <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootquiz1 <- xmlRoot(quiz1)
rootquiz1[[1]]
?read.table
test <- read.table("test/X-test.txt")
test <- read.table("test/X_test.txt")
setwd("C:/Users/Helen/Desktop/Senior Project/Getting and Cleaning Data/
Course Project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
72/7
36/3.05
sqrt(11.80328)
install.packages("datasets")
install.packages("datasets")
data("ToothGrowth")
library(help='datasets')
data(ToothGrowth)
load(ToothGrowth)
View(ToothGrowth)
View('ToothGrowth')
load('ToothGrowth')
View(ToothGrowth)
help(ToothGrowth)
with(ToothGrowth, summary(len))
with(ToothGrowth, hist(len))
abline(h=mean(len), col="red")
abline(h=mean(ToothGrowth$len), col="red")
abline(h=mean(ToothGrowth$len), col="red", lwd=2)
abline(h=mean(ToothGrowth$len), col="red", lwd=2)
abline(h=18.81, col="red", lwd=2)
with(ToothGrowth, hist(len))
abline(h=18.81, col="red", lwd=2)
abline(v=18.81, col="red", lwd=2)
abline(v=mean(len), col="red", lwd=2)
abline(v=mean(len)), col="red", lwd=2)
abline(v=mean(len), col="red", lwd=2)
abline(v=mean(ToothGrowth$len), col="red", lwd=2)
?Median
??med
?median
abline(v=median(ToothGrowth$len), col="blue", lwd=2)
help(ToothGrowth)
library(ggplot2)
qplot(len, data=ToothGrowth, facets = .~ supp)
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count")
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
main="Tooth Length in Guinea Pigs by Supplement Type", binwidth=5)
main="Tooth Length in Guinea Pigs by Supplement Type") + geom_abline(v=18)
main="Tooth Length in Guinea Pigs by Supplement Type" + geom_abline(v=18))
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type" + geom_abline(v=18))
p + geom_vline(c(18,20))
p <- qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
p + geom_vline(c(18,20))
p + geom_vline(aes(xintercept=z), c(18,20))
p + geom_vline(aes(xintercept = c(15, 20)))
qplot(len, data=ToothGrowth, facets = .~ dose, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
qplot(len, data=ToothGrowth, facets = .~ dose, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Dose")
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
?summary
with(ToothGrowth, tapply(len, supp, mean))
with(ToothGrowth, tapply(len, supp, summary))
?summary
help(ToothGrowth)
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
qplot(y=len, x=dose, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
qplot(y=len, x=dose, data=ToothGrowth, facets = .~ supp, xlab="Length",
main="Tooth Length in Guinea Pigs by Supplement Type")
qplot(y=len, x=dose, data=ToothGrowth, facets = .~ supp, xlab="Dose", ylab="Length",
main="Tooth Length in Guinea Pigs by Supplement Type")
with(ToothGrowth, tapply(len, list(supp, dose), summary))
with(ToothGrowth, tapply(len, list(supp, as.factor(dose), summary))
)
with(ToothGrowth, tapply(len, list(supp, as.factor(dose)), summary))
with(ToothGrowth, tapply(len, list(supp, as.factor(dose)), mean))
library(reshape)
?melt
melt(avg)
avg <- with(ToothGrowth, tapply(len, list(supp, as.factor(dose)), mean))
melt(avg)
avg <- melt(avg)
avg
help(ToothGrowth)
qplot(len, data=ToothGrowth, facets = .~ supp)
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count")
with(ToothGrowth, tapply(len, supp, mean))
with(ToothGrowth, tapply(len, supp, summary))
?ttest
?t.test
with(ToothGrowth, t.test(len, supp))
with(ToothGrowth, t.test(len, y=supp))
with(ToothGrowth, t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==0.5), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.0), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.5), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.5), t.test(len~supp))
ToothGrowth$dose
with(subset(ToothGrowth, ToothGrowth$dose==2.0), t.test(len~supp))
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count")
with(subset(ToothGrowth, ToothGrowth$dose==0.5), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.0), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==2.0), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==0.5), bartlett.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.0), bartlett.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==2.0), bartlett.test(len~supp))
activity <- read.csv("activity.csv")
##Calculating the number of steps taken per day
steps <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
##Histogram of the number of steps taken each day
qplot(steps, main="Number of Steps per Day", xlab="Steps", ylab="Frequency",
binwidth=1000)
##Calculating the mean and median steps per day
mean(steps)
median(steps)
############################################
##
## WHAT IS THE AVERAGE DAILY ACTIVITY PATTERN?
##
############################################
##Calculating the average steps per time interval
library(reshape2)
library(plyr)
avgsteps <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
avgsteps <- melt(avgsteps)
##Renaming variables
avgsteps <- rename(avgsteps, c("Var1"="Interval", "value"="Steps"))
##Making time series plot of
qplot(Interval, Steps, data=avgsteps, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line()
#max at interval 835
avgsteps[avgsteps$Steps==max(avgsteps$Steps),]
###############################
##
## IMPUTING MISSING VALUES
##
###############################
sum(is.na(activity$steps))
##2304 missing values for steps
##Imputing average for that interval into new data frame
imputeact <- activity
for(i in 1:length(activity$steps)) {
if(is.na(activity$steps[i]==TRUE)) {
imputeact$steps[i] <- avgsteps$Steps[avgsteps$Interval==activity$interval[i]]
}
}
##Creating a histogram of total number steps per day with imputed data
imputesteps <- tapply(imputeact$steps, imputeact$date, sum, na.rm=TRUE)
qplot(imputesteps, main="Total Number of Steps Per Day", xlab="Steps",
ylab="Frequency", binwidth=1000)
##Finding the mean and median
mean(imputesteps)
median(imputesteps)
#These values are higher than the previous ones when the data was not imputed.
##########################################
##
## ARE THERE DIFFERENCES IN ACTIVITY PATTERNS
## BETWEEN WEEKDAYS AND WEEKENDS?
##
##########################################
#Convert to date type and use weekdays
setwd("C:/Users/Helen/Desktop/Senior Project/Reproducible Research/Peer Review #1")
##Reading in the data
activity <- read.csv("activity.csv")
###################################
##
## WHAT IS THE MEAN TOTAL NUMBER OF STEPS
## TAKEN PER DAY?
##
###################################
##Calculating the number of steps taken per day
steps <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
##Histogram of the number of steps taken each day
library(ggplot2)
qplot(steps, main="Number of Steps per Day", xlab="Steps", ylab="Frequency",
binwidth=1000)
##Calculating the mean and median steps per day
mean(steps)
median(steps)
############################################
##
## WHAT IS THE AVERAGE DAILY ACTIVITY PATTERN?
##
############################################
##Calculating the average steps per time interval
library(reshape2)
library(plyr)
avgsteps <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
avgsteps <- melt(avgsteps)
##Renaming variables
avgsteps <- rename(avgsteps, c("Var1"="Interval", "value"="Steps"))
##Making time series plot of
qplot(Interval, Steps, data=avgsteps, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line()
#max at interval 835
avgsteps[avgsteps$Steps==max(avgsteps$Steps),]
###############################
##
## IMPUTING MISSING VALUES
##
###############################
sum(is.na(activity$steps))
##2304 missing values for steps
##Imputing average for that interval into new data frame
imputeact <- activity
for(i in 1:length(activity$steps)) {
if(is.na(activity$steps[i]==TRUE)) {
imputeact$steps[i] <- avgsteps$Steps[avgsteps$Interval==activity$interval[i]]
}
}
##Creating a histogram of total number steps per day with imputed data
imputesteps <- tapply(imputeact$steps, imputeact$date, sum, na.rm=TRUE)
qplot(imputesteps, main="Total Number of Steps Per Day", xlab="Steps",
ylab="Frequency", binwidth=1000)
##Finding the mean and median
mean(imputesteps)
median(imputesteps)
#These values are higher than the previous ones when the data was not imputed.
##########################################
##
## ARE THERE DIFFERENCES IN ACTIVITY PATTERNS
## BETWEEN WEEKDAYS AND WEEKENDS?
##
##########################################
#Convert to date type and use weekdays
date <- as.date(activity$date)
date <- as.Date(activity$date)
str(date)
weekday(date)
weekdays(date)
activity$day <- weekdays(date)
View(activity)
if(activity$day=="Saturday" | activity$day=="Sunday") {activity$daytype=="Weekend"}
else {activity$daytype=="Weekday"}
if(activity$day="Saturday" | activity$day="Sunday") {activity$daytype=="Weekend"}
else {activity$daytype=="Weekday"}
if(activity$day="Saturday" | activity$day="Sunday") {activity$daytype=="Weekend"}
else {activity$daytype=="Weekday"}
if(activity$day="Saturday" | activity$day="Sunday") activity$daytype=="Weekend"
else activity$daytype=="Weekday"
if(activity$day="Saturday" || activity$day="Sunday") activity$daytype=="Weekend"
else activity$daytype=="Weekday"
if(activity$day="Saturday" || activity$day="Sunday") activity$daytype=="Weekend"
else activity$daytype=="Weekday"
if(activity$day="Saturday" | activity$day="Sunday") {
activity$daytype=="Weekend"} else {
activity$daytype=="Weekday"
}
activity$daytype <- NULL
if(activity$day="Saturday" | activity$day="Sunday") {
activity$daytype=="Weekend"} else {
activity$daytype=="Weekday"
}
activity$daytype <- NULL
if(activity$day="Saturday" | activity$day="Sunday") {
activity$daytype="Weekend"} else {
activity$daytype="Weekday"
}
(activity$day="Saturday")
if(activity$day=="Saturday" | activity$day=="Sunday") {
activity$daytype="Weekend"} else {
activity$daytype="Weekday"
}
if(activity$day=="Saturday" || activity$day=="Sunday") {
activity$daytype="Weekend"} else {
activity$daytype="Weekday"
}
View(activity)
activity$day <- weekdays(date)
View(activity)
if(activity$day=="Saturday" || activity$day=="Sunday") {
activity$daytype="Weekend"} else {
activity$daytype="Weekday"
}
View(activity)
ate type and use weekdays
date <- as.Date(imputeact$date)
imputeact$day <- weekdays(date)
if(imputeact$day=="Saturday" || imputeact$day=="Sunday") {
imputeact$daytype="Weekend"} else {
imputeact$daytype="Weekday"
}
date <- as.Date(imputeact$date)
imputeact$day <- weekdays(date)
if(imputeact$day=="Saturday" || imputeact$day=="Sunday") {
imputeact$daytype="Weekend"} else {
imputeact$daytype="Weekday"
}
View(imputeact)
avgstepsday <- tapply(imputeact$steps, list(imputeact$interval, imputeact$daytype),
,mean)
avgstepsday
sum(is.na(imputeact$steps))
avgstepsday <- with(imputeact, tapply(steps, list(interval, daytype),mean)
)
avgstepsday
table(imputeact$daytype)
(imputeacts$day=="Saturday")
(imputeact$day=="Saturday")
imputeact$daytype[5474]
(imputeact$daytype[5474]=="Saturday")
imputeact$day[5474]
(imputeact$daytype[5474]="Saturday")
(imputeact$daytype[5474]=="Saturday")
(imputeact$daytype[5474]=="Saturday")
(imputeact$daytype[5474]=="Saturday" | imputeact$daytype[5474] == "Sunday")
if(imputeact$day=="Saturday" || imputeact$day=="Sunday") {
imputeact$daytype="Weekend"} else {
imputeact$daytype="Weekday"
}
table(imputeact$daytype)
for(i in 1:length(imputeact$day))
if(imputeact$day[i]=="Saturday" | imputeact$day[i]=="Sunday") {
imputeact$daytype[i]="Weekend"} else {
imputeact$daytype[i]="Weekday"
}
table(imputeact$day
)
table(imputeact$daytype)
avgstepsday <- with(imputeact, tapply(steps, list(interval, daytype),mean))
avgstepsday
melt(avgstepsday)
View(avgstepsday)
avgstepsday <- melt(avgstepsday)
View(avgstepsday)
View(avgstepsday)
avgsteps <- rename(avgsteps, c("Var1"="Interval", "Var2"="Weekday", "value"="Steps"))
avgstepsday <- rename(avgstepsday, c("Var1"="Interval", "Var2"="Weekday", "value"="Steps"))
?qplot
qplot(Interval, Steps, data=avgsteps, facets = ~.Weekday, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line()
qplot(Interval, Steps, data=avgsteps, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line() +
facet_grid(.~Weekday)
qplot(Interval, Steps, data=avgsteps, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line() +
facet_grid(.~Weekday, scales="free")
qplot(Interval, Steps, data=avgsteps, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line() +
facet_wrap(~Weekday)
qplot(Interval, Steps, data=avgstepsday, ylab="Average Number of Steps",
main="Average Number of Steps Taken Per Time Interval") +
geom_line() +
facet_wrap(~Weekday)
activity <- read.csv("activity.csv")
steps <- tapply(activity$steps, activity$date, sum, na.rm=TRUE)
